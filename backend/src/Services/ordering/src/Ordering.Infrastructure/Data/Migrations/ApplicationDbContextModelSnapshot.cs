// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ordering.Infrastructure.Data;

#nullable disable

namespace Ordering.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.AddOn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpgradableFrom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddOn", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.AddOnDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddOnId")
                        .HasColumnType("text");

                    b.Property<string>("AddOnValue")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionTypeId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddOnId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("AddOnDetail", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpgradableFrom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscriptionDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("SubscriptionDetail", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscriptionType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionType", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserAddOn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ActiveDurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("AddOnDescription")
                        .HasColumnType("text");

                    b.Property<int>("AddOnDurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("AddOnId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddOnName")
                        .HasColumnType("text");

                    b.Property<decimal>("AddOnPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddOnId");

                    b.ToTable("UserAddOn", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserAddOnHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionValue")
                        .HasColumnType("text");

                    b.Property<string>("UserAddonId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserAddonId");

                    b.ToTable("UserAddOnHistory", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ActiveDurationDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionDescription")
                        .HasColumnType("text");

                    b.Property<int>("SubscriptionDurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("text");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("UserSubscription", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserSubscriptionHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserSubscriptionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("UserSubscriptionHistory", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.AddOnDetail", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.AddOn", "AddOn")
                        .WithMany()
                        .HasForeignKey("AddOnId");

                    b.HasOne("Ordering.Domain.Entities.Subscriptions.SubscriptionType", "SubscriptionType")
                        .WithMany("AddOnDetails")
                        .HasForeignKey("SubscriptionTypeId");

                    b.Navigation("AddOn");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscriptionDetail", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany("SubscriptionDetails")
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Ordering.Domain.Entities.Subscriptions.SubscriptionType", "SubscriptionType")
                        .WithMany("SubscriptionDetails")
                        .HasForeignKey("SubscriptionTypeId");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserAddOn", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.AddOn", "AddOn")
                        .WithMany("UserAddOns")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddOn");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserAddOnHistory", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.UserAddOn", "UserAddOn")
                        .WithMany("UserAddOnHistories")
                        .HasForeignKey("UserAddonId");

                    b.Navigation("UserAddOn");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserSubscription", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserSubscriptionHistory", b =>
                {
                    b.HasOne("Ordering.Domain.Entities.Subscriptions.UserSubscription", "UserSubscription")
                        .WithMany("UserSubscriptionHistories")
                        .HasForeignKey("UserSubscriptionId");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.AddOn", b =>
                {
                    b.Navigation("UserAddOns");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.Subscription", b =>
                {
                    b.Navigation("SubscriptionDetails");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscriptionType", b =>
                {
                    b.Navigation("AddOnDetails");

                    b.Navigation("SubscriptionDetails");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserAddOn", b =>
                {
                    b.Navigation("UserAddOnHistories");
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.UserSubscription", b =>
                {
                    b.Navigation("UserSubscriptionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
