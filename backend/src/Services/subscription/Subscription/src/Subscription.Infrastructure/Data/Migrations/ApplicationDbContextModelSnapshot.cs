// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscription.Infrastructure.Data;

#nullable disable

namespace Subscription.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscribeDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SubscribeId")
                        .HasColumnType("text");

                    b.Property<string>("SubscribeTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SubscribeValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscribeId");

                    b.ToTable("SubscribeDetail", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.BenefitType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowInSubscribe")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInUnitItem")
                        .HasColumnType("boolean");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UnitType", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.Package", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.PackageDetail", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("text");

                    b.Property<string>("UnitItemId")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PackageId", "UnitItemId");

                    b.HasIndex("UnitItemId");

                    b.ToTable("PackageDetail", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.Subscribe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpgradableFrom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribe", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.UnitItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BenefitSize")
                        .HasColumnType("text");

                    b.Property<string>("BenefitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BenefitTypeId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("LiveDuration")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityUpload")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInPackage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInPageInDealPrice")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInPageInSpirationPrice")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValidDuration")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BenefitTypeId");

                    b.ToTable("UnitItem", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Vouchers.UserVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VoucherId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVoucher", (string)null);
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Vouchers.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StarDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Ordering.Domain.Entities.Subscriptions.SubscribeDetail", b =>
                {
                    b.HasOne("Subscription.Domain.Entities.Subscriptions.Subscribe", "Subscribe")
                        .WithMany("SubscribeDetails")
                        .HasForeignKey("SubscribeId");

                    b.Navigation("Subscribe");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.PackageDetail", b =>
                {
                    b.HasOne("Subscription.Domain.Entities.Subscriptions.Package", "Package")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription.Domain.Entities.Subscriptions.UnitItem", "UnitItem")
                        .WithMany("PackageDetails")
                        .HasForeignKey("UnitItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("UnitItem");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.UnitItem", b =>
                {
                    b.HasOne("Subscription.Domain.Entities.Subscriptions.BenefitType", null)
                        .WithMany("UnitItems")
                        .HasForeignKey("BenefitTypeId");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Vouchers.UserVoucher", b =>
                {
                    b.HasOne("Subscription.Domain.Entities.Vouchers.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.BenefitType", b =>
                {
                    b.Navigation("UnitItems");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.Package", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.Subscribe", b =>
                {
                    b.Navigation("SubscribeDetails");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Subscriptions.UnitItem", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("Subscription.Domain.Entities.Vouchers.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
